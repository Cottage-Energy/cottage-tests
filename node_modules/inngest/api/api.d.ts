import { type fetch } from "cross-fetch";
import { type ExecutionVersion } from "../components/execution/InngestExecution";
import { type Result } from "../types";
import { type BatchResponse, type ErrorResponse, type StepsResponse } from "./schema";
type FetchT = typeof fetch;
interface InngestApiConstructorOpts {
    baseUrl?: string;
    signingKey: string;
    signingKeyFallback: string | undefined;
    fetch?: FetchT;
}
export declare class InngestApi {
    readonly baseUrl: string;
    private signingKey;
    private signingKeyFallback;
    private readonly fetch;
    constructor({ baseUrl, signingKey, signingKeyFallback, fetch, }: InngestApiConstructorOpts);
    private get hashedKey();
    private get hashedFallbackKey();
    setSigningKey(key: string | undefined): void;
    setSigningKeyFallback(key: string | undefined): void;
    getRunSteps(runId: string, version: ExecutionVersion): Promise<Result<StepsResponse, ErrorResponse>>;
    getRunBatch(runId: string): Promise<Result<BatchResponse, ErrorResponse>>;
}
export {};
//# sourceMappingURL=api.d.ts.map