"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serve = exports.frameworkName = void 0;
const InngestCommHandler_1 = require("./components/InngestCommHandler");
exports.frameworkName = "cloudflare-pages";
/**
 * In Cloudflare, serve and register any declared functions with Inngest, making
 * them available to be triggered by events.
 *
 * @public
 */
const serve = (options) => {
    const handler = new InngestCommHandler_1.InngestCommHandler(Object.assign(Object.assign({ frameworkName: exports.frameworkName, 
        /**
         * Assume that we want to override the `fetch` implementation with the one
         * globally available in the Cloudflare env. Specifying it here will
         * ensure we avoid trying to load a Node-compatible version later.
         */
        fetch: fetch.bind(globalThis) }, options), { handler: ({ request: req, env, }) => {
            return {
                body: () => req.json(),
                headers: (key) => req.headers.get(key),
                method: () => req.method,
                env: () => env,
                url: () => new URL(req.url, `https://${req.headers.get("host") || ""}`),
                transformResponse: ({ body, status, headers }) => {
                    return new Response(body, {
                        status,
                        headers,
                    });
                },
            };
        } }));
    return handler.createHandler();
};
exports.serve = serve;
//# sourceMappingURL=cloudflare.js.map