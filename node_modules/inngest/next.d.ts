import { type NextApiResponse } from "next";
import { type NextRequest } from "next/server";
import { type ServeHandlerOptions } from "./components/InngestCommHandler";
import { type SupportedFrameworkName } from "./types";
export declare const frameworkName: SupportedFrameworkName;
/**
 * In Next.js, serve and register any declared functions with Inngest, making
 * them available to be triggered by events.
 *
 * Supports Next.js 12+, both serverless and edge.
 *
 * @example Next.js <=12 or the pages router can export the handler directly
 * ```ts
 * export default serve({ client: inngest, functions: [fn1, fn2] });
 * ```
 *
 * @example Next.js >=13 with the `app` dir must export individual methods
 * ```ts
 * export const { GET, POST, PUT } = serve({
 *            client: inngest,
 *            functions: [fn1, fn2],
 * });
 * ```
 *
 * @public
 */
export declare const serve: (options: ServeHandlerOptions) => ((expectedReq: NextRequest, res: NextApiResponse) => Promise<Response>) & {
    GET: (expectedReq: NextRequest, res: NextApiResponse) => Promise<Response>;
    POST: (expectedReq: NextRequest, res: NextApiResponse) => Promise<Response>;
    PUT: (expectedReq: NextRequest, res: NextApiResponse) => Promise<Response>;
};
//# sourceMappingURL=next.d.ts.map