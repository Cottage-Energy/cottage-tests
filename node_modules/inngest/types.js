"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.err = exports.ok = exports.logLevels = exports.sendEventResponseSchema = exports.incomingOpSchema = exports.StepOpCode = exports.failureEventErrorSchema = void 0;
const zod_1 = require("zod");
exports.failureEventErrorSchema = zod_1.z
    .object({
    name: zod_1.z.string().trim().optional(),
    error: zod_1.z.string().trim().optional(),
    message: zod_1.z.string().trim().optional(),
    stack: zod_1.z.string().trim().optional(),
})
    .catch({})
    .transform((val) => {
    return {
        name: val.name || "Error",
        message: val.message || val.error || "Unknown error",
        stack: val.stack,
    };
});
/**
 * Unique codes for the different types of operation that can be sent to Inngest
 * from SDK step functions.
 */
var StepOpCode;
(function (StepOpCode) {
    StepOpCode["WaitForEvent"] = "WaitForEvent";
    /**
     * Legacy equivalent to `"StepRun"`. Has mixed data wrapping (e.g. `data` or
     * `data.data` depending on SDK version), so this is phased out in favour of
     * `"StepRun"`, which never wraps.
     *
     * Note that it is still used for v0 executions for backwards compatibility.
     *
     * @deprecated Only used for v0 executions; use `"StepRun"` instead.
     */
    StepOpCode["Step"] = "Step";
    StepOpCode["StepRun"] = "StepRun";
    StepOpCode["StepError"] = "StepError";
    StepOpCode["StepPlanned"] = "StepPlanned";
    StepOpCode["Sleep"] = "Sleep";
    /**
     * Used to signify that the executor has requested that a step run, but we
     * could not find that step.
     *
     * This is likely indicative that a step was renamed or removed from the
     * function.
     */
    StepOpCode["StepNotFound"] = "StepNotFound";
    StepOpCode["InvokeFunction"] = "InvokeFunction";
})(StepOpCode || (exports.StepOpCode = StepOpCode = {}));
exports.incomingOpSchema = zod_1.z.object({
    id: zod_1.z.string().min(1),
    data: zod_1.z.any().optional(),
    error: zod_1.z.any().optional(),
});
exports.sendEventResponseSchema = zod_1.z.object({
    /**
     * Event IDs
     */
    ids: zod_1.z.array(zod_1.z.string()).default([]),
    /**
     * HTTP Status Code. Will be undefined if no request was sent.
     */
    status: zod_1.z.number().default(0),
    /**
     * Error message. Will be undefined if no error occurred.
     */
    error: zod_1.z.string().optional(),
});
/**
 * A set of log levels that can be used to control the amount of logging output
 * from various parts of the Inngest library.
 *
 * @public
 */
exports.logLevels = [
    "fatal",
    "error",
    "warn",
    "info",
    "debug",
    "silent",
];
const ok = (data) => {
    return { ok: true, value: data };
};
exports.ok = ok;
const err = (error) => {
    return { ok: false, error };
};
exports.err = err;
//# sourceMappingURL=types.js.map